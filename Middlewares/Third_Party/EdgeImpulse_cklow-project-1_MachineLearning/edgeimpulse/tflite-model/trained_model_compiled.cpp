/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 07.06.2021 09:17:45

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 41472;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,32,32,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 1024, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[32] = { 7298, 2568, 3977, 1193, -1158, -2571, -1128, 3810, 542, -858, 3441, -955, 2530, -2803, 7088, 5012, 1467, 5064, 4394, -6043, 3366, -5863, 2683, -1122, 1121, 347, -4592, 3377, 1833, -2220, -1115, 2454, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 4.8941883505904116e-06, 4.4002936192555353e-06, 4.3251479837635998e-06, 4.1882512960000895e-06, 4.6226959966588765e-06, 4.6608147385995835e-06, 4.2467822822800372e-06, 4.7737248678458855e-06, 4.3823965825140476e-06, 4.2560614019748755e-06, 3.8121893339848612e-06, 4.3040327000198886e-06, 4.5499518819269724e-06, 4.8210613385890611e-06, 3.8249036151682958e-06, 4.6840109462209512e-06, 4.1675366446725093e-06, 4.5094552660884801e-06, 4.3518239181139506e-06, 5.1546599024732132e-06, 4.6289978854474612e-06, 4.3658192225848325e-06, 4.5620217861142009e-06, 4.1962434806919191e-06, 4.8137080739252269e-06, 4.232595983921783e-06, 5.1342235565243755e-06, 4.908064966002712e-06, 4.6611498873971868e-06, 4.0927170630311593e-06, 4.7253574848582502e-06, 4.5318329284782521e-06, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { 1774, -2648, -971, -1428, 4738, -4919, 1253, 351, 5544, 681, 690, 1829, -3682, 925, 2066, 740, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 5.2803607104578987e-06, 5.355795565264998e-06, 5.6875474001572002e-06, 5.3671824389311951e-06, 5.6454027799190953e-06, 5.2179589147272054e-06, 5.0090379772882443e-06, 5.5415989663742948e-06, 5.7961565289588179e-06, 5.6617245718371123e-06, 5.7825031944958027e-06, 5.4059619287727401e-06, 5.5106443141994532e-06, 6.2222275118983816e-06, 5.3265425776771735e-06, 5.4074334912002087e-06, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { -1521, 3715, -161, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 7.1578347160539124e-06, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*1024] = { 
  -28, -84, -93, 30, 18, -28, 51, 15, -73, -21, -48, 38, -1, 45, 47, -30, -28, 22, -80, -89, -29, 13, 70, 61, -6, -3, 21, -38, -28, 92, -69, 6, 36, 71, -6, -78, -65, 52, -51, 40, 1, -57, 41, -51, 1, -47, -90, 74, -14, -46, 12, -39, -24, 18, -20, 63, -68, -13, -45, -89, -72, -45, -11, 40, 32, 48, -16, -33, 73, 27, 39, -17, -48, -38, -16, -36, -39, -38, -97, 42, 11, 35, 31, -44, 59, -69, -36, 5, 37, -29, 77, 59, 56, 44, 11, -38, -65, -13, 11, 54, -52, -83, -43, 48, -21, -36, -48, 0, 17, 48, -61, 66, -83, -76, -39, -91, 54, -46, 35, 9, -68, -30, -10, -97, -47, 35, -39, -65, -67, 53, -57, 31, 17, -50, 5, 105, -52, 8, -21, 33, 46, -49, -16, 24, -33, 62, -82, 46, -6, -74, -42, 39, 59, 58, -32, 2, -56, -17, -89, 55, 7, 71, 3, -76, -57, 57, 62, 73, -33, 0, -42, 53, 34, -14, 28, 23, -44, -15, -61, 24, 62, 31, 26, -18, -69, -37, 24, -61, 45, -40, 10, -13, -8, 7, 18, -47, -98, 81, 91, 97, -19, -2, 64, -68, -54, -19, -48, 52, -46, -37, 7, 55, -89, 24, 47, 45, 15, 92, 26, -83, 29, -42, 25, -60, -64, -36, 51, -13, 17, 35, -84, 84, -9, -25, 21, 53, 66, -43, -88, 29, -21, -48, 24, -46, 18, -44, -89, -45, 3, 5, -57, -31, -43, 45, -62, 28, -14, 28, -14, -76, -5, 46, 41, 4, 38, 0, 5, 69, 32, 51, -19, 10, 48, -1, -82, -100, 9, -30, 22, 100, -38, -7, 26, -32, 35, -85, -25, -54, 81, -36, -37, -44, -104, 82, -53, 68, -35, 4, -22, 14, -11, -96, 44, -69, -12, 28, 9, 26, -1, 36, 39, 41, -73, 23, -52, -33, 38, 14, 5, -60, -69, 83, -76, -61, -82, 75, 48, -49, 25, -2, -10, -27, 22, -52, -22, -58, -41, -40, -30, 24, -64, -30, 36, 15, -68, 46, -2, 57, 24, -87, -50, -18, -6, 65, 13, 21, -76, -20, -74, -40, 58, 55, 70, 34, -54, 23, -83, 26, 55, 70, -51, -2, -69, -15, -52, 77, -19, -30, 57, -84, 16, 65, 5, 58, -27, 24, 5, 12, -95, -16, 90, 44, 37, 47, -41, 60, -22, 0, -87, -47, 100, 33, 37, -25, -44, 40, 81, 26, -6, 72, 16, 39, -16, 0, 29, 2, 5, 27, 7, -35, -78, 18, -30, -47, 49, -22, -15, -28, 52, 11, -103, 8, 23, -3, -54, -62, -8, 65, 15, -37, 22, 45, -31, -11, 67, 60, 6, 12, 26, 89, -32, -94, 52, 11, 26, -60, 63, 64, -64, 76, 63, -35, -89, -81, -6, -19, -69, -16, -75, 53, 77, 45, -33, 31, -63, -11, 12, -73, -69, -39, -35, -24, 5, -14, -83, 70, 61, 17, -94, 74, 51, -96, 2, -106, 37, -16, 43, 76, -93, -29, -26, 17, -67, -44, -20, 93, 75, -55, -35, 27, 12, -64, -37, 8, 38, 20, 43, -17, -28, -37, 55, 87, -33, 73, -75, -28, -10, -18, 12, -63, 27, -70, -16, 0, 101, -15, -78, 80, -87, -2, -67, -34, -32, -94, 66, 3, 11, 27, -67, -42, 43, 25, 11, 44, -47, 45, 8, -42, -63, 44, -77, 96, -93, 33, -7, -45, 100, 79, -13, -28, -24, -21, -29, 27, -107, -23, -58, -17, -31, -45, -13, 92, 24, 62, -28, 2, 36, 3, -10, -39, 38, -25, -66, 97, -57, -98, 41, 61, -2, 83, -28, 19, 78, 15, 34, -15, 27, -10, 15, -46, -26, -66, 35, -48, -44, 16, -65, 86, 61, 54, 69, -55, 57, -116, 33, 43, -45, -3, 16, -41, 19, -55, 53, -45, 40, 38, 18, -35, 30, 2, -27, -46, 8, -13, -53, -34, 64, -42, -50, -32, -21, -3, 20, 38, -13, -73, -40, -50, 17, -31, 2, 46, 22, -45, -75, 58, 21, -2, -33, 48, -85, -9, 41, 15, 30, -12, -19, -63, -2, -29, -61, -13, -37, 68, 12, -1, 0, 40, 13, 45, -39, -23, -31, -27, 6, -63, -30, -53, 61, 44, -52, -59, 45, -20, -63, 38, 61, -61, 25, -15, 84, -11, 43, 31, -50, 43, 76, 4, 78, -89, 45, 57, 17, 14, -45, 23, 63, -42, 66, 79, -7, 48, -35, 43, 59, -27, 69, -24, 23, 7, 40, -48, 77, -47, -75, 19, -26, -16, 65, 31, -53, -77, 47, -42, 10, 17, 61, 59, -50, -7, 38, -28, 68, -25, 49, -88, 62, 10, -43, -46, -65, 7, -27, 22, 1, -33, -64, 77, -19, 53, -20, -26, -57, -13, -28, -30, -67, -32, -54, 56, 113, -43, -75, 38, -52, 91, 43, -10, -39, 38, -3, 55, -41, 10, -68, 58, 27, -41, -65, -64, 68, 76, -72, 33, -74, -54, -13, -16, 30, -85, -23, 54, 22, -41, -59, 53, 55, 7, 26, -79, -14, -30, -32, -18, 72, 13, -17, 49, -47, -10, -26, 34, 38, -22, 23, -62, 23, -57, 27, -77, 51, 31, -30, 36, -35, 50, 9, 10, -45, -75, 62, -87, 67, -87, -27, -63, -19, 0, -99, -2, 7, 38, -55, -10, 33, 45, 7, 8, 43, -45, -56, 42, 43, 32, 60, 29, -69, -7, -44, -17, 24, -69, 43, -1, 60, -65, -71, -28, -22, -21, 27, -21, -27, 2, -42, 73, 13, -35, -68, -64, -65, -63, -43, 34, 71, -98, -37, 46, -32, 55, -25, 20, 20, 24, 39, -66, 7, -14, -7, -58, 62, -20, -8, 14, -29, 65, -79, 33, -67, 10, 9, 36, 69, -9, -45, -37, -8, -3, 18, 30, -65, 39, -54, -1, -25, 19, 21, -21, 50, 38, -55, 62, -20, -26, -90, -53, 49, -38, -73, 80, 51, -15, -39, -50, 41, -113, -57, 51, 60, -82, -53, 35, 87, 33, -47, -62, 33, -58, 26, -30, -32, -25, -2, 56, -56, 46, 29, 32, 10, -87, 50, -2, 0, -56, -40, -66, -53, -85, -57, -56, -29, 57, 48, 3, -58, 50, 24, -4, -33, -3, -31, -43, -49, -21, 
  46, 16, 78, -47, 62, 14, 1, 53, 80, 32, -82, 39, 80, 48, -55, -7, -93, 78, 16, 36, 53, 44, -58, -54, 25, 87, -76, 38, 49, -74, -43, -10, 22, 73, 57, 24, 32, 34, -6, 30, 20, 3, -50, 23, -40, 38, -34, 68, 20, -58, -27, 22, -27, -38, 64, -14, 36, 39, -26, -36, 55, -90, -19, 74, -1, 87, 19, -86, 51, 13, 13, 62, -25, -40, -4, 25, 49, -47, -68, -38, 54, 18, 10, -1, -27, 14, 76, 51, 26, 51, -59, -3, 21, 22, 34, 38, 91, 82, 75, -19, 47, 31, 98, 98, 82, 94, -106, 35, 73, -57, -4, 67, -37, 44, -22, 56, 66, 52, 27, 38, -40, 97, 2, 71, 49, -91, 8, 50, 48, -33, -28, 8, -2, 38, -25, -15, 108, -35, 35, -59, 23, -67, -89, 14, -88, -4, 18, 29, -49, 38, 50, -6, 100, 18, -74, 86, 32, -33, -91, 50, -75, -26, 61, 11, -28, -79, 63, -56, 66, 7, -59, -1, 61, -105, 32, -61, -10, -53, 8, -87, 42, 35, -1, 38, -16, 32, -66, 86, -4, -26, -92, 82, 35, 26, -16, -24, 52, -44, -24, 35, 60, -58, 29, 99, 35, -84, -19, -17, -1, -1, -48, 36, -42, -31, 103, -22, 61, -28, 4, 26, -62, -78, 8, -45, 65, 0, 9, 21, -34, -27, 30, 73, 38, 7, -69, 96, -27, -39, 3, -12, -20, 78, 18, 18, 44, 84, -48, 50, 0, 61, 56, -31, 27, 18, -90, 33, -8, -11, 16, 15, 0, 35, -32, 14, 101, -10, 44, 42, 14, 23, -115, -66, -34, 29, -75, -35, 93, -85, 60, -74, 100, -45, 11, -60, 24, 27, -17, -17, -29, -62, 52, -66, 75, -17, 99, -77, -5, -82, -7, -23, -23, -63, 15, 24, -17, -6, -67, -28, 49, -50, 10, 45, 82, 40, -35, 0, -67, -76, 43, 40, -76, 20, -59, 38, -20, -26, 34, -77, 87, -46, 26, -22, 25, -12, 9, -16, -5, 35, 33, 12, 111, 34, 58, 41, 32, -27, 44, -26, 15, -57, -33, 73, 66, -34, -48, -112, 70, 2, 98, -88, 48, -66, 17, 51, -89, -72, 13, 17, 60, 46, -16, -40, 0, 16, -18, -85, -4, -31, 12, -30, -35, 39, -4, 62, -69, -40, 45, 56, -33, -22, 78, -41, 107, 23, 47, 62, -65, -44, 54, -94, 23, -55, 21, 8, 90, -28, 60, 35, 98, 7, -69, -52, -91, -16, 4, 5, -38, 39, 52, -82, -18, -95, -29, -22, 11, -3, -24, -47, -77, 27, -32, 28, 58, -117, -13, 37, 99, -4, -34, -83, 77, -71, -57, 83, -75, -18, -25, -7, -46, -36, -24, -7, 27, -21, 54, -46, 73, 7, -85, 44, -87, -20, -86, -16, 63, -53, 49, -113, 90, -70, 14, -12, 61, -43, 17, -31, -85, 36, 5, 57, 10, 35, 61, -119, 111, -35, -8, 58, 42, 36, -127, 3, -3, -75, -26, 12, -28, -40, 15, 28, 13, 33, -11, -38, -15, -84, -32, 106, 6, -92, -72, -28, -84, -61, -13, -107, 105, 34, -16, 37, -20, 17, 40, -59, -22, -16, -24, -69, 17, -25, -39, -63, -6, -30, 35, 46, 107, -45, -63, 34, 4, -51, 4, 71, -7, -55, -11, -56, -1, -100, 73, -60, -38, -29, -80, -57, -42, 14, 4, 13, -62, -87, -7, -81, -37, 8, -69, -58, 102, 18, 38, -61, -82, -32, -68, 57, 17, -82, -3, 17, 81, 11, -52, -82, -20, -85, -50, -16, -89, -41, -34, 35, -50, -26, 4, 29, 84, -98, -68, -64, 19, 33, -81, 43, -22, -106, -76, 83, -67, -5, -63, -10, 97, -104, -43, 67, 7, -20, -32, -29, -70, -81, -23, 48, -10, -57, -21, 13, -37, 43, -10, 16, -4, -54, -35, 36, -58, -87, -62, -26, 15, -62, 8, -71, 42, 32, -3, 11, 80, -67, -98, 13, -68, -21, -10, 0, 29, -61, -29, 48, 62, -55, -28, -47, 61, 45, 53, 62, 73, -79, 28, -32, 7, 56, -4, -70, 48, -82, -74, -53, 23, -47, -22, 67, -48, -72, -12, 52, -86, 33, 46, -15, 28, -89, -24, -37, -3, -79, 23, 35, -77, -68, -68, -24, 54, -40, -97, 1, 32, -17, -41, -6, 90, 5, 43, 12, 21, -51, -41, -31, 12, 41, -68, -69, 9, -77, -57, 5, 18, -7, -110, -49, 52, -32, -10, 43, 32, 39, -7, -98, 115, 42, -27, -28, 43, 12, -40, -13, -7, -42, -118, 1, -44, -17, -40, 19, -37, -67, -28, -32, 43, -9, -91, -4, -46, 22, 0, 44, -82, -38, -28, -91, 1, 23, -34, 49, -7, 42, -31, 42, -23, 32, 10, -58, 6, 30, -80, -55, -26, 3, 35, -62, -17, 72, 19, -9, 42, -76, -40, 11, -74, -73, -20, 55, 47, 57, -47, 12, -13, -16, -24, -57, -57, -19, -66, 56, 30, -73, 35, -26, 72, -25, 26, 22, 59, 52, 5, 47, -6, 7, 23, 41, 17, -76, 15, -88, 90, 30, 58, 39, -39, -96, -54, -62, -23, 10, -90, 65, -11, -38, -57, -78, 36, -2, 14, -75, 84, -83, 73, -39, -8, -39, -103, -2, 43, -72, 0, -48, 95, -91, 50, 46, 95, 97, 4, -3, 27, -70, 11, -63, -14, 22, -3, -53, -13, -46, 57, 42, -43, 31, 51, 45, 18, 1, -14, -30, -3, -14, -18, -80, 36, 32, 61, -5, -1, 48, -6, 29, 21, 25, -14, -20, -23, 20, -2, -33, 94, -49, -3, 11, 90, 9, 37, -8, 77, -49, 6, -44, -84, 3, -54, -7, 32, 28, 77, 39, 18, -12, 38, 79, -33, -21, -19, -36, -45, -67, -13, -56, -50, 40, 20, 90, 106, -46, 13, 48, -10, -38, -19, 72, 33, -54, -55, -39, 83, -68, -59, 4, 94, 77, 33, -22, -47, 5, 32, 42, 22, -74, 17, -31, 32, 14, 19, 24, 66, -78, 11, -49, 54, -79, -53, 21, -23, -10, 71, 3, -15, -38, -12, 75, 63, -63, -75, 61, -61, -59, -77, -12, 20, 48, 63, -10, -53, -70, -41, -1, -29, -63, -68, -65, 58, -56, -2, -43, 
  -73, -9, 16, 70, 39, 30, -50, -15, 4, -40, 43, -86, -47, -62, 6, -33, -75, 72, 81, 18, 79, -45, -50, -6, -84, -37, -39, 28, 35, 11, 93, 6, -78, -18, 79, -28, 22, 12, 11, -41, -56, -13, 32, 17, -65, -90, 33, -40, -82, 3, -2, 11, -61, -28, -13, -29, -29, 40, 7, -55, -34, 19, 21, -89, 43, 53, 12, 99, -45, 60, -29, -31, -9, 54, 62, -68, 39, -23, 5, 67, -41, 25, 29, -50, 62, -22, -23, 43, -26, -64, 63, -3, 18, -48, 49, -35, -82, -5, 15, -16, 30, 67, -12, -56, -1, -41, 21, 28, 27, 62, -36, 8, -41, 62, -40, 27, -33, 40, -30, 51, -20, 2, -59, 49, 23, 63, 48, -49, -25, -39, 58, -45, 11, 74, -76, -4, -25, 51, 107, 1, 48, 14, -2, -11, -10, -54, -14, -45, 85, 2, 31, 32, 13, 0, 43, 1, -16, 48, 80, 10, -28, 37, 12, -2, -60, 67, -23, -78, 3, -13, 95, 36, 56, 60, 88, 27, 48, -90, -20, 39, -30, -31, -92, -85, 18, 8, -35, -107, -2, -3, 7, -74, 7, -22, -59, -29, -62, -46, 34, -35, -106, 16, -46, -57, -44, 0, 77, -19, 3, 43, 75, -31, -4, -19, -59, -57, -96, -99, 29, -64, 6, 22, -30, 45, -18, -43, -36, 30, 33, -26, 2, 31, -92, -102, 43, 28, -61, 5, -22, 3, 51, 1, -42, 37, 32, 35, 56, -108, -35, -36, 21, -15, -10, -38, 106, 25, 29, 40, 84, 111, -71, 85, 15, 29, 33, 17, 99, 26, 37, -65, 18, 54, -5, 10, 101, 100, 7, 7, -116, -52, -66, -16, 35, -32, -11, 58, 19, -12, 18, 10, 47, -15, 82, -66, -92, -70, -91, -75, -13, 22, -39, 56, -23, 55, -54, 10, 78, 104, 65, 38, 19, -28, -7, 39, 93, -118, -50, -9, -76, 43, 69, 70, 1, -38, -27, -68, -78, -41, -23, -27, -16, -110, -49, 16, -57, -16, -55, -52, 55, -23, -30, 9, -17, -37, -29, 49, -15, -45, 12, -25, 92, 24, -67, -23, 55, 112, 28, 70, 22, -74, -85, -95, 21, 21, -64, -68, -25, -39, -21, 35, 78, -5, 45, -51, -50, -37, -35, -6, 47, 45, 55, -38, 81, -59, 80, 37, 49, 98, -21, -16, -103, -95, -88, -50, 57, 9, -1, 63, 60, 95, 63, 0, 81, 93, -52, -14, 36, -86, -90, -86, -19, -68, 68, 40, -14, -61, -48, 64, 34, -1, -69, -24, 19, -47, 1, -101, -50, -78, 31, 81, 41, 2, -36, 45, 40, 101, -94, 6, -103, -15, -105, -60, 46, -35, 35, -51, 29, 29, 6, -64, -26, 1, -81, 15, -56, 37, -49, -62, 55, -96, 29, 35, -28, 39, 20, 59, 45, -2, -82, -24, -91, 36, 22, 23, 27, -29, 69, 99, -38, 15, -16, 45, -44, -21, -53, -36, 12, -23, -26, -84, -32, 20, 78, 73, 30, -31, -66, 2, 54, 53, 0, 56, 16, -14, -28, 49, 50, -57, -35, 41, -9, 22, 27, 41, 77, 93, 54, -2, 7, -33, 16, 56, -18, -36, 47, 46, -21, 44, 63, -51, -19, -30, 12, 62, -100, 4, -33, -72, -32, -44, 47, 97, -17, 49, 53, -51, 78, 2, 21, -23, 12, -65, -10, 45, 17, -29, -37, 1, 63, 2, -47, -59, -43, 89, -2, -28, -60, -94, -96, 63, 80, -3, -58, -18, 90, 74, -40, 1, 29, 104, -63, -48, 3, -62, -12, -47, 11, -31, -50, -3, 65, 24, 28, -55, -2, 36, 49, 22, -41, 23, -45, -33, 62, -20, -4, -24, 0, 58, 51, -16, 51, 90, -51, -52, 27, -62, -83, -78, 92, -3, -63, -23, 67, -37, -68, 50, 88, 64, 27, 59, 16, -4, 23, 62, 40, -57, -5, 81, -11, -8, 34, -38, 54, -24, 12, 21, 14, 34, -28, -61, 36, -53, 46, -57, 90, 17, 43, -71, -2, -8, -2, -35, 22, 31, 46, -34, 88, -49, 24, 62, -32, -46, -22, -12, -50, -24, -48, 30, 64, -83, -81, 54, 32, -99, 76, 69, 101, 85, -23, 21, -45, -50, -54, 4, 10, 31, -3, -37, 92, 5, -32, -37, 108, 41, 72, -10, 89, 22, -66, 59, -52, -85, 32, 67, 67, -76, -36, 45, 77, -55, -20, -63, -18, -34, 10, 49, 57, -38, -95, 50, -49, -90, -60, 20, 103, 47, -63, 7, -57, 104, -50, -43, -11, -38, -63, 16, 53, 33, -41, -5, -38, -56, 72, -18, 1, 61, 63, -20, 0, -58, -11, -42, 23, -49, -37, 63, 47, 64, -25, -37, -71, 53, 13, 43, -70, 28, -87, -60, 43, 30, -65, 6, 98, -35, -3, 37, -31, -37, -51, -46, 8, -62, -97, 28, 39, -37, -30, -41, 102, -42, 22, -51, -31, -43, -17, -1, -105, 6, 27, 46, 0, -95, 41, 21, -44, 49, -15, -1, 68, -4, 16, -40, 7, -46, -97, 25, 36, -86, 10, -10, 25, -2, 46, -65, -58, 1, -5, 45, -76, 33, -17, 48, 58, 29, -8, 70, -24, 94, -7, -52, 55, 76, -85, 44, -32, 35, -34, -57, -49, 25, -1, 74, -23, -2, 70, -24, 59, -39, -55, -9, 55, -11, -96, -69, -27, -15, 50, -6, -7, -26, -31, -35, 69, 47, -9, -27, -26, 10, 4, 45, 5, 88, -41, -32, 80, 87, 73, 13, -55, 46, 31, -45, -90, 49, -27, -23, 10, 33, 13, 63, 55, -15, 52, 47, 45, 31, 12, 35, -85, 12, 13, 30, 9, 21, -2, -40, 5, 90, 90, 52, 49, -33, 34, 57, -41, 5, -23, 66, 97, -96, 0, -15, -9, 90, -4, 7, 62, -35, -93, 41, 55, 21, -25, 55, -14, -54, 47, -26, 57, -63, 48, 12, 55, 0, 2, -57, 37, 41, -15, -92, -82, 33, -69, 47, 42, 3, 20, 17, 77, -42, 25, -27, 10, 19, -56, -24, -13, -61, 70, -21, 53, 73, -47, -35, -1, 79, -34, 63, -72, 58, -59, -54, 65, -9, 8, -5, -5, 64, -7, -31, -54, -27, -49, 16, 50, -57, -25, 8, -78, 89, -14, -6, -18, -42, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,1024 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00099844636861234903, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[32*3*3*3] = { 
  /* [0][0][][] */ -68,101,58, 11,-5,-99, 119,35,-80, 
  /* [0][1][][] */ -99,127,-28, 32,-21,-37, -51,17,28, 
  /* [0][2][][] */ 122,-8,-5, 102,-11,-34, -85,101,0, 
  /* [1][0][][] */ 25,24,-33, 117,-22,-114, 95,-86,8, 
  /* [1][1][][] */ 19,-52,-72, 113,-124,-24, 44,82,-70, 
  /* [1][2][][] */ 82,-98,-127, 67,67,93, -3,-76,-27, 
  /* [2][0][][] */ 16,-118,-26, 83,41,-69, -47,-102,94, 
  /* [2][1][][] */ -3,-83,-49, -35,81,87, -59,-1,26, 
  /* [2][2][][] */ 37,127,-97, 93,-45,67, -82,99,-85, 
  /* [3][0][][] */ -127,120,-27, 36,36,25, 116,-69,-6, 
  /* [3][1][][] */ -75,-37,91, -29,-34,2, -12,-40,39, 
  /* [3][2][][] */ -106,-112,12, 80,42,105, 107,4,-75, 
  /* [4][0][][] */ 5,109,-101, 15,44,33, 40,121,117, 
  /* [4][1][][] */ 105,-43,71, 4,-90,117, -7,57,41, 
  /* [4][2][][] */ -36,89,-44, 76,47,90, -80,61,127, 
  /* [5][0][][] */ 69,-9,81, 117,39,21, 16,-58,-79, 
  /* [5][1][][] */ 21,-71,6, -78,-72,69, -69,-28,-54, 
  /* [5][2][][] */ 22,-127,29, 37,84,83, 72,-20,89, 
  /* [6][0][][] */ -107,-40,-106, 24,61,-55, -36,101,-27, 
  /* [6][1][][] */ 5,-35,-27, -24,-25,-80, 26,-112,66, 
  /* [6][2][][] */ -81,9,-81, 1,36,-26, -100,91,-127, 
  /* [7][0][][] */ -27,68,-43, 42,-52,66, 119,114,29, 
  /* [7][1][][] */ 124,17,-123, 95,-53,8, 1,127,74, 
  /* [7][2][][] */ 37,-83,-106, 73,-68,-27, 15,37,-49, 
  /* [8][0][][] */ 59,-81,-39, 127,-25,79, 127,-75,2, 
  /* [8][1][][] */ -57,20,113, -3,-55,-27, -28,-118,61, 
  /* [8][2][][] */ 18,2,-24, 59,-76,87, -72,57,103, 
  /* [9][0][][] */ 4,17,103, 57,38,86, 79,127,-36, 
  /* [9][1][][] */ -9,52,106, 111,-98,87, 109,52,41, 
  /* [9][2][][] */ 51,93,16, -103,79,49, -86,-67,42, 
  /* [10][0][][] */ -110,-103,-61, 49,5,25, -31,-14,-86, 
  /* [10][1][][] */ -52,-76,127, -67,-1,-24, -62,18,-12, 
  /* [10][2][][] */ -33,78,-123, -89,-125,104, 34,-59,-10, 
  /* [11][0][][] */ 112,-106,43, 122,-8,91, 8,48,-62, 
  /* [11][1][][] */ 110,6,116, 93,-111,104, 93,-6,35, 
  /* [11][2][][] */ 95,-127,-84, -21,-52,23, 72,-66,-40, 
  /* [12][0][][] */ 63,-84,25, 73,-93,0, 56,-98,-18, 
  /* [12][1][][] */ 127,44,30, -2,-34,-68, -85,106,47, 
  /* [12][2][][] */ 17,-99,-20, -44,46,38, 3,-21,-62, 
  /* [13][0][][] */ 12,-32,-74, 0,86,57, -47,44,15, 
  /* [13][1][][] */ -36,-69,100, 100,-71,-38, -94,22,127, 
  /* [13][2][][] */ 70,98,61, -18,-100,106, -37,-29,116, 
  /* [14][0][][] */ -68,-3,123, -54,-38,-2, -108,-94,111, 
  /* [14][1][][] */ -104,-58,45, -23,15,22, 79,-67,-42, 
  /* [14][2][][] */ -93,127,111, -31,113,23, -90,9,-114, 
  /* [15][0][][] */ -63,-52,36, 122,43,-43, 82,113,-104, 
  /* [15][1][][] */ -52,16,-16, -13,-20,-36, -49,101,81, 
  /* [15][2][][] */ 77,109,-127, 14,39,29, 4,115,45, 
  /* [16][0][][] */ -92,53,-15, -28,-36,-3, -113,-84,110, 
  /* [16][1][][] */ 0,90,99, 114,-35,29, 84,-127,-62, 
  /* [16][2][][] */ -50,-76,-8, 89,-85,-23, -64,16,-98, 
  /* [17][0][][] */ -54,8,23, -26,34,-77, 6,-30,-53, 
  /* [17][1][][] */ 23,4,94, -18,-54,-55, 103,-52,-78, 
  /* [17][2][][] */ -43,127,31, -25,-38,-79, -62,-83,44, 
  /* [18][0][][] */ -54,-97,30, -18,-15,-33, 33,-85,-40, 
  /* [18][1][][] */ 51,-44,-23, 104,61,-77, -60,-83,-9, 
  /* [18][2][][] */ 27,-34,111, 127,32,23, -31,-40,105, 
  /* [19][0][][] */ -17,-16,50, 104,-114,114, -17,-6,-10, 
  /* [19][1][][] */ 1,14,102, -85,-56,1, 82,-42,100, 
  /* [19][2][][] */ 15,71,127, 81,6,87, 41,-104,-83, 
  /* [20][0][][] */ -85,29,41, -17,-24,3, -22,-5,-105, 
  /* [20][1][][] */ -72,-29,-103, 10,-102,-68, -66,-77,108, 
  /* [20][2][][] */ 119,59,127, -96,74,-21, 35,126,45, 
  /* [21][0][][] */ 30,-56,17, -51,-66,103, 113,91,-13, 
  /* [21][1][][] */ -47,-120,58, -56,-52,127, -72,49,92, 
  /* [21][2][][] */ 60,16,8, 82,-34,49, 86,3,109, 
  /* [22][0][][] */ -97,120,-35, 73,6,28, -74,-114,-1, 
  /* [22][1][][] */ -74,-31,-49, 49,-97,-92, 127,-75,53, 
  /* [22][2][][] */ -5,-34,41, 113,28,-7, 7,-25,89, 
  /* [23][0][][] */ -25,-34,-87, 3,87,123, -65,-92,-22, 
  /* [23][1][][] */ 66,-18,97, -29,76,47, 127,84,70, 
  /* [23][2][][] */ -115,61,-88, 94,-119,-44, -40,-14,122, 
  /* [24][0][][] */ 77,62,63, -76,-56,25, 18,-1,38, 
  /* [24][1][][] */ -87,-50,-100, 13,101,-22, -28,-33,83, 
  /* [24][2][][] */ -48,-37,56, 53,-25,29, 127,-100,-67, 
  /* [25][0][][] */ -58,-120,-115, 85,-45,-110, 17,-75,-76, 
  /* [25][1][][] */ 42,50,-53, 96,-98,-34, 71,-90,124, 
  /* [25][2][][] */ 109,127,124, -100,-13,98, -104,31,-86, 
  /* [26][0][][] */ 96,78,127, -96,61,79, -83,16,78, 
  /* [26][1][][] */ -7,45,-58, -48,-56,62, 9,74,62, 
  /* [26][2][][] */ -59,-10,18, 50,-47,-25, -29,-6,57, 
  /* [27][0][][] */ 126,77,31, -71,-70,-71, -23,-3,26, 
  /* [27][1][][] */ -62,-87,46, 62,95,-74, -86,-16,-47, 
  /* [27][2][][] */ 23,-87,-40, 53,83,-57, 101,-100,127, 
  /* [28][0][][] */ 69,18,111, -67,-53,-82, -40,-83,-92, 
  /* [28][1][][] */ 77,-17,-50, -78,-39,106, 127,50,114, 
  /* [28][2][][] */ 32,-13,73, -16,-52,-57, 74,-88,85, 
  /* [29][0][][] */ 37,-34,39, 41,108,1, -52,78,120, 
  /* [29][1][][] */ -40,114,69, -126,-22,-96, -95,65,125, 
  /* [29][2][][] */ 57,17,-95, 111,114,127, 20,-59,2, 
  /* [30][0][][] */ -89,67,65, 40,-55,81, -22,-73,94, 
  /* [30][1][][] */ 91,94,-97, 36,127,116, 44,-40,-50, 
  /* [30][2][][] */ 61,66,8, 48,49,13, 74,15,-19, 
  /* [31][0][][] */ 84,59,-14, 38,-88,127, -90,-38,-55, 
  /* [31][1][][] */ 64,84,92, 55,-97,-78, -68,-35,20, 
  /* [31][2][][] */ -81,-71,-23, 110,-22,67, -7,-22,81, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,3,3,3 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0012480180012062192, 0.0011220747837796807, 0.0011029127053916454, 0.0010680040577426553, 0.0011787874391302466, 0.0011885076528415084, 0.0010829294333234429, 0.0012172997230663896, 0.0011175110703334212, 0.0010852955747395754, 0.00097210821695625782, 0.001097528263926506, 0.001160237705335021, 0.0012293705949559808, 0.00097535038366913795, 0.0011944227153435349, 0.0010627218289300799, 0.0011499109677970409, 0.0011097150854766369, 0.0013144381809979677, 0.0011803944362327456, 0.0011132837971672416, 0.0011633154936134815, 0.0010700420243665576, 0.0012274954933673143, 0.0010793119436129928, 0.0013092269655317068, 0.0012515564449131489, 0.0011885931016877294, 0.0010436427546665072, 0.001204966101795435, 0.0011556172976270318, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*3*3*32] = { 
  /* [0][0][][] */ -67,-33,-60,86,-41,-88,79,-54,103,-24,-86,-25,-8,-105,18,-55,55,-46,63,68,14,80,65,-1,86,-44,-67,67,-9,-50,-69,84, -4,21,79,15,-55,-38,-61,-95,-53,32,-99,47,114,53,10,22,19,28,-81,99,27,-83,41,67,38,36,-73,-12,7,-73,-108,-65, -108,18,-80,19,-57,56,17,98,-44,63,63,71,-6,-25,-59,33,32,-43,18,16,7,63,-61,34,38,-53,22,-71,-64,-72,-78,24, 
  /* [0][1][][] */ 66,-59,-25,78,54,-43,43,-100,-66,-19,-73,-39,-65,-61,55,69,-17,87,-68,52,74,76,-11,-9,16,10,-7,11,19,76,33,-85, 33,-89,57,-27,6,27,81,15,30,82,-30,-51,-56,-2,80,71,76,-49,-35,32,-106,45,53,0,-53,-42,-109,-82,-67,-56,0,-49, 53,26,16,43,49,64,3,-83,-50,66,67,77,-20,-39,3,83,-119,-10,44,-4,-98,-25,-13,66,29,1,62,64,-75,8,-16,37, 
  /* [0][2][][] */ 4,-26,-80,-79,-91,62,19,54,-121,-45,88,-55,-82,-86,-61,-3,3,-9,54,31,32,-31,24,-31,-95,-50,-26,3,17,-34,-103,-107, -20,-64,-61,-42,-6,-52,42,80,-54,-44,80,101,62,-87,6,52,-1,-24,65,31,18,-1,19,38,64,-33,-52,25,-71,-87,-95,-20, -44,36,118,-10,-23,85,-26,82,60,26,58,89,127,19,-36,81,-38,-38,34,70,45,85,-28,71,5,-98,59,-54,-51,-64,-32,39, 
  /* [1][0][][] */ -83,78,-110,-78,-6,-16,58,28,-77,-57,-46,18,-77,30,-40,-28,81,109,44,89,96,-23,-34,8,82,-119,-22,85,53,24,9,44, -69,47,69,-22,6,0,-72,-71,-30,-36,109,-21,-26,-70,58,74,103,12,91,71,-54,-4,-44,-69,-57,79,-52,2,16,-101,-79,31, -84,19,-19,32,55,-60,104,-17,-6,45,55,-48,19,79,51,-23,95,74,-78,-59,86,-54,91,82,22,48,37,-50,-102,-112,-64,-43, 
  /* [1][1][][] */ -94,9,-7,-64,48,-2,8,-78,46,34,9,-43,30,86,33,-18,-9,-60,-22,82,-46,42,46,25,-36,-39,90,-8,52,13,-48,-57, -103,-6,80,-25,43,-82,8,3,-13,-4,76,-55,34,54,37,-22,33,-90,-77,93,-14,-46,-22,90,32,-48,14,6,79,-91,42,81, -25,-82,10,-38,-44,-52,67,31,14,-31,5,-36,44,-30,51,89,55,-42,63,-28,-14,57,-15,81,-102,-25,35,48,91,26,94,-14, 
  /* [1][2][][] */ -15,15,-43,-3,96,-86,84,38,17,4,-91,99,-83,-17,-95,-52,75,1,-44,-69,11,-18,25,-84,-37,-39,-23,2,-94,57,82,29, 85,-62,-32,78,73,-48,18,62,-51,81,-72,-40,60,45,32,-49,-86,-92,6,118,10,-44,-78,101,56,72,27,-92,-28,81,-88,-10, -40,-84,42,-62,58,-60,-24,37,70,73,20,-42,19,25,-27,-97,-2,8,-109,-9,-73,-26,-124,15,70,52,67,-127,53,98,76,86, 
  /* [2][0][][] */ -85,80,-47,-42,-1,93,-84,-95,102,-13,-34,95,62,-42,-74,37,6,-70,-23,-66,-5,16,77,2,89,90,77,127,55,69,-6,-26, 44,-9,-41,-10,25,-34,-49,7,68,-22,66,86,39,44,-85,51,20,39,67,-40,22,86,78,-2,61,30,-21,50,59,67,-22,-18, 11,101,79,-16,-72,-27,40,73,-11,-87,-68,6,119,47,-107,-9,79,31,-6,69,-102,33,-6,-73,55,-36,65,87,73,45,74,37, 
  /* [2][1][][] */ -48,97,-19,19,-10,86,-62,-94,115,-48,-97,-18,47,72,-82,-93,74,-84,-63,-5,-36,-54,41,61,100,63,31,95,44,18,2,107, -48,52,-6,74,52,1,-45,-25,-3,19,-70,16,-46,53,36,-98,43,-27,-73,-76,29,-83,-53,-75,-70,-68,-33,-85,-56,-37,59,58, 68,-55,74,83,47,56,20,-38,101,-12,-81,-77,23,-70,-55,67,1,-30,28,-16,30,-28,59,33,12,-19,-73,-41,-68,12,-96,16, 
  /* [2][2][][] */ -53,102,71,49,-37,111,-35,-82,102,-49,-39,-8,101,-55,-99,-51,-6,75,75,57,35,-56,41,22,87,97,10,17,66,56,-84,-52, -1,-8,-73,-74,10,-45,-20,66,-32,80,15,99,113,28,-9,13,24,44,63,35,-80,63,11,-22,74,-20,52,49,36,15,22,-85, 81,4,-4,80,-18,18,85,87,66,-37,66,-21,81,2,49,-56,68,71,-56,-59,-8,-41,-3,17,-22,-92,-24,65,58,41,-20,-35, 
  /* [3][0][][] */ -75,46,2,17,-26,101,-47,93,-11,-14,9,107,97,97,76,-17,24,-103,50,35,-78,73,99,-38,13,-69,-27,80,97,-33,1,109, 4,107,104,41,-32,26,6,13,-9,-25,-48,45,31,1,-3,12,-72,-89,78,110,-98,80,-46,-89,-81,89,75,67,-28,-46,90,-26, -80,51,53,-82,-14,95,73,77,44,-94,-89,101,-17,-58,35,-89,-23,-92,119,93,86,74,7,-65,-20,17,10,9,93,-76,-11,127, 
  /* [3][1][][] */ -6,-59,42,69,-78,91,31,-23,5,97,-68,45,-10,-1,-20,-28,-36,-50,41,67,31,52,49,-19,-50,65,-82,-77,-43,88,-92,0, -57,93,-58,27,-74,-55,-84,-51,98,10,-7,56,126,47,-88,-49,87,3,-73,53,46,55,-47,53,92,-79,-81,-77,11,-63,48,-76, 80,74,9,36,-93,-12,-39,-23,-53,-45,-101,27,57,78,13,-35,-82,-62,108,-39,-76,-33,113,75,114,2,46,36,69,-98,-104,14, 
  /* [3][2][][] */ -15,24,-40,-61,67,-65,69,-30,25,25,69,-59,52,60,91,85,20,82,10,-74,-75,-18,14,-75,-48,-40,90,91,5,69,-77,-88, -2,-56,-83,78,-45,36,31,100,-32,65,-44,-56,113,60,-2,4,1,-60,88,-30,-24,110,16,46,121,9,-72,-68,-11,-28,-15,-19, 43,-14,-6,41,15,102,76,-4,-14,87,-82,17,14,73,-79,90,-21,-114,-89,95,-52,-73,37,-11,44,-43,-38,56,-33,-25,-71,45, 
  /* [4][0][][] */ 45,53,93,-1,50,-83,-36,76,-117,-15,9,-26,-59,-90,32,111,74,-94,66,58,-61,72,-59,70,-9,28,-106,29,-85,-14,-81,-98, -35,-15,26,-46,68,28,-75,7,-60,-86,-42,79,-94,-39,-37,12,1,-62,5,-8,-122,-15,-86,11,27,15,-103,62,-100,-26,-23,71, 9,95,127,-6,96,-42,-23,-38,-111,11,-82,-61,12,-28,17,8,-17,-2,43,-86,38,-8,75,-44,-82,-4,66,60,-38,-35,-10,24, 
  /* [4][1][][] */ -57,13,92,-47,-76,-38,-46,72,-43,76,37,39,-21,-9,-89,-45,-13,44,58,-59,-77,-49,-34,-74,114,-42,-39,99,44,35,-9,-39, 9,104,-73,-5,-77,49,72,-21,-23,10,30,-44,-60,-38,-108,81,-44,70,-54,30,-64,7,33,-25,12,-24,-100,71,-49,74,77,5, 106,-48,92,-6,-54,-108,80,-45,62,-17,32,84,12,-72,60,-30,-43,-76,76,-81,-104,-99,2,88,1,-91,43,31,64,-25,-19,-47, 
  /* [4][2][][] */ 63,61,-62,-77,28,-43,50,-4,-56,-45,31,61,16,47,19,-12,34,-12,-85,-32,-78,80,47,-17,-26,1,69,-40,41,-84,83,-17, -31,-12,-68,13,68,65,12,77,10,83,-26,29,83,-65,39,29,78,54,-78,-120,-110,-94,30,85,39,-58,-58,52,-45,69,91,80, 112,5,23,67,28,-63,72,93,-1,-4,30,-52,-61,-53,19,0,-6,43,-32,-99,-59,27,-105,-73,72,6,-76,-53,-11,23,-50,-17, 
  /* [5][0][][] */ 32,-71,-109,54,81,108,25,86,-37,-72,-79,60,64,100,-86,-67,-36,6,37,19,57,18,-83,74,-60,69,60,-14,-71,-48,-5,84, -43,-22,9,-35,52,10,-36,-57,-28,119,-7,55,-39,35,80,59,-66,-104,22,123,-66,115,-120,16,-3,110,26,-77,92,82,86,0, -105,-11,56,40,40,109,71,10,-6,-43,28,-12,58,-86,-65,-51,2,48,-73,127,-16,-68,30,39,-2,-14,11,82,54,76,-25,10, 
  /* [5][1][][] */ 2,-91,-4,-105,54,83,-59,39,83,-50,97,-18,65,-43,-71,-29,-18,109,-34,17,-124,75,-64,4,-28,48,-34,-8,20,-93,-91,-84, -27,-89,-38,96,80,9,45,8,-34,18,-56,14,-77,90,45,-77,-80,56,-82,108,-69,-29,-9,-9,23,37,-10,-83,92,-51,37,-81, -111,-99,44,-90,-45,-66,69,35,-54,35,-80,92,-57,-33,-26,-16,-12,-42,-79,28,33,85,-9,-48,2,15,-42,-103,72,-78,56,-103, 
  /* [5][2][][] */ -120,-109,-109,-65,98,-2,-90,11,-15,-33,70,95,28,-71,-8,-45,105,-13,-115,22,-68,17,46,108,-67,24,14,32,-65,98,93,92, -29,-87,-49,-29,-42,108,-37,29,97,-38,30,105,55,-36,34,96,95,10,90,83,-4,85,-61,-44,-86,8,104,-62,41,-48,103,-77, 17,-26,6,69,105,0,15,39,66,33,69,-70,7,-2,40,-39,31,-42,16,71,71,78,-52,97,15,25,34,-46,-29,36,98,6, 
  /* [6][0][][] */ 79,10,26,93,21,41,-54,72,24,4,44,-97,-23,108,-8,-103,-47,72,-15,-28,82,-56,-22,-23,12,21,5,-95,-102,29,20,-74, 103,-30,-67,54,-3,1,122,-96,-73,13,-8,-23,-53,56,36,-86,-19,-11,33,2,82,83,-52,110,36,100,-74,-62,-100,109,-33,24, 27,8,-81,64,78,38,9,96,-84,86,108,-75,-9,-58,-5,92,-99,-62,-76,-63,92,77,85,35,-20,-99,127,-66,92,-77,-90,-47, 
  /* [6][1][][] */ -31,-25,17,-57,18,43,59,-61,7,15,105,22,-5,12,12,-93,-75,25,31,-91,-61,6,-62,-60,62,-108,-89,16,-58,68,66,27, 44,52,-85,-6,77,-65,103,73,55,0,-90,-56,-121,-58,106,-3,-96,-85,86,92,82,-86,-37,14,48,-80,73,87,-33,-51,-101,-39, 31,-93,-69,44,40,-49,-69,54,-64,36,65,74,-77,68,-23,11,14,50,-56,-9,-61,69,-60,77,40,-2,86,-13,-61,-17,-49,-101, 
  /* [6][2][][] */ 88,45,113,113,26,-19,54,30,-56,42,71,0,13,14,-60,-24,-32,91,93,-58,0,-11,48,-47,25,-53,-72,-67,47,-54,41,-110, 6,51,12,-15,56,-40,-121,-45,8,25,-31,-64,-66,-58,-48,-27,-71,4,34,37,100,-102,-11,51,-50,39,-39,50,33,10,10,12, 91,92,16,-122,103,14,96,21,-90,-67,106,-95,-37,-57,63,-71,-43,101,62,-43,-37,-76,-108,40,-20,-120,-50,14,-35,-26,24,-82, 
  /* [7][0][][] */ -43,-93,66,-34,-30,76,95,20,23,-77,-53,12,56,65,65,-85,-97,-66,-33,11,86,27,-42,80,29,18,-50,33,75,93,10,-16, -21,36,102,45,35,-47,-1,-26,33,-89,-62,74,49,0,27,-75,35,107,127,23,85,-79,-47,68,-75,24,0,79,-71,-27,-32,-16, 60,-12,82,-97,2,16,-20,21,-40,-56,82,-58,-63,-81,41,-49,-48,19,-31,-40,112,-65,-39,65,27,-6,-78,35,18,-65,13,18, 
  /* [7][1][][] */ 20,41,-93,-27,48,-34,-79,-29,-44,-10,-43,-65,-102,25,61,-46,-22,-22,-65,-82,59,55,-81,62,88,-54,7,73,15,72,31,1, -57,-88,54,-12,15,-89,66,71,-81,-26,-48,-45,41,65,34,9,48,102,-32,-63,74,97,86,80,50,-87,-23,-2,56,-79,-93,-38, 75,3,-32,-70,98,-59,-94,57,73,96,-98,72,-104,3,75,60,27,40,78,-62,105,97,-18,55,55,93,-18,82,81,-27,-31,27, 
  /* [7][2][][] */ 58,12,46,-94,90,17,101,-37,51,13,-48,-96,25,97,-18,12,-81,-3,52,31,-45,-75,27,-27,-10,-69,95,60,50,-57,35,10, -62,-26,75,-83,54,-29,-94,15,-57,48,61,-68,-16,20,100,94,-77,30,-35,-36,14,-17,-53,31,21,50,66,71,101,62,-29,-50, -45,-85,-60,-51,-63,47,37,-32,42,53,69,-64,-94,-29,-35,43,50,50,40,-27,-5,39,32,113,73,-72,6,4,83,63,-64,-69, 
  /* [8][0][][] */ -26,-32,109,-12,-22,-55,13,102,-45,-11,-64,79,32,13,77,88,-22,-65,27,-107,14,-65,53,36,-48,-102,-63,-37,31,-58,39,15, 107,-24,34,-15,71,21,-44,94,-74,72,-27,56,-90,-37,55,32,15,-35,-61,52,-88,-108,13,12,-41,28,12,-72,-96,-50,-53,-84, 5,15,-25,-28,-54,-94,-60,-15,3,-36,28,-79,-84,-11,-4,96,30,-80,49,-45,3,-105,8,65,66,54,67,-10,-97,-62,84,-78, 
  /* [8][1][][] */ 29,58,-42,10,-39,-86,18,-50,-121,50,-24,14,32,-24,-70,27,-71,-29,24,-10,56,-83,-100,-21,-56,-93,-48,-82,-4,101,61,-107, 97,24,-53,69,9,45,46,-59,43,-41,11,-1,-68,-113,-23,16,-64,-95,0,-70,-13,4,23,66,60,42,-62,16,-66,-9,71,27, 123,50,74,15,32,-88,-93,78,-95,68,-3,38,-9,68,-9,116,-109,-44,-2,-89,-73,-89,31,-88,33,18,-60,-52,-35,73,-82,6, 
  /* [8][2][][] */ 119,-31,-66,95,75,51,30,85,-92,34,-62,12,26,15,100,1,62,-117,-39,-90,-47,-12,-122,-106,-87,-89,-90,-45,-74,28,-12,34, 32,86,-55,-97,87,-127,32,74,-91,-80,-54,-79,-25,-47,42,23,95,-83,46,59,12,-34,-113,-35,-102,-67,-36,96,-62,75,82,-39, 113,-45,65,-6,-87,-126,-52,-6,-90,69,2,-76,56,-59,54,-28,-47,-26,-47,-88,55,9,-39,-5,-66,52,43,79,11,-38,-1,62, 
  /* [9][0][][] */ -19,-79,20,-20,88,81,-109,-10,11,108,99,-64,40,58,98,-37,-68,-6,76,28,29,-5,28,40,-89,74,58,84,97,26,-10,-40, 12,25,-1,8,-4,101,54,7,-5,-13,-18,12,68,70,-75,50,32,29,43,8,-14,98,37,94,-63,-14,-72,-87,99,-14,55,107, 78,-127,-113,-95,28,48,1,-57,-7,58,76,-75,-57,66,-25,-80,-10,108,59,-22,89,-55,40,-15,87,86,82,65,-46,71,-61,29, 
  /* [9][1][][] */ -17,47,52,44,103,-74,-2,-15,59,31,-47,38,35,-36,-14,-36,-105,38,-81,58,-26,-29,45,57,-81,-87,41,-90,-58,54,21,56, 79,-46,-123,-71,-80,12,-4,-13,102,51,23,-70,-36,-47,101,18,-22,-51,20,-78,19,-20,25,-27,-82,-29,-15,-83,25,31,-71,-68, -22,4,-83,-68,-59,-50,37,-45,-27,-28,-8,-16,-91,89,17,38,88,-66,-42,11,-74,-24,-110,-53,74,-48,3,-27,25,-35,9,-36, 
  /* [9][2][][] */ 30,0,-71,-41,68,-1,31,-12,62,61,18,-75,39,-2,-1,-29,64,59,14,-15,81,21,0,95,-7,72,-15,-104,-24,33,-23,-85, 93,-57,-9,-56,104,-7,49,-81,-43,-35,-11,19,34,-29,36,64,-59,13,36,17,-59,35,34,45,26,3,70,-9,-75,-10,-69,-52, 83,-74,-74,-59,55,5,-44,-55,15,-2,74,-85,67,-36,28,91,-6,82,-53,38,51,58,41,36,66,-32,47,-96,-67,-58,-29,2, 
  /* [10][0][][] */ -3,35,59,16,10,-44,-44,48,127,36,25,65,122,43,55,-69,30,21,12,-61,-53,-7,112,-17,71,87,65,68,-31,-30,-40,61, 29,-65,-57,3,7,-23,-89,20,-57,94,59,-39,61,-66,-43,88,9,-45,-37,110,28,30,40,48,55,-39,71,9,-57,19,5,5, 38,43,85,-83,-66,-50,-56,-68,35,-51,57,65,-31,-15,-38,-20,117,12,22,-48,39,45,96,-90,-3,-27,85,33,84,38,-21,121, 
  /* [10][1][][] */ 20,8,18,36,42,98,-56,104,74,70,-58,-18,-9,98,-51,-30,90,-82,69,42,-99,-56,106,-4,58,37,-33,57,-53,78,60,47, 89,-41,45,-8,-76,117,16,-81,-3,-4,1,10,-3,-60,52,-94,-15,67,61,6,-75,-38,-53,-1,-78,29,64,23,97,-84,-59,-2, -24,-9,14,45,-56,-30,-12,24,79,-79,7,53,-69,-18,20,-12,-34,-41,-46,95,-69,-35,67,84,-54,25,48,-53,61,-96,47,-76, 
  /* [10][2][][] */ 61,3,-65,57,-78,91,-31,18,-51,-31,-63,54,50,75,8,-62,68,-56,116,93,10,99,-3,55,48,-43,34,95,109,-2,49,14, 2,9,-23,32,47,-25,53,32,-21,10,-58,90,9,-56,-106,42,23,-3,77,-58,-70,-75,53,75,44,-79,-74,-53,-70,14,-81,85, 65,25,-69,1,-37,94,-16,-68,-17,29,85,45,49,40,-39,-87,59,-88,87,50,-42,31,-55,-78,51,78,-29,43,80,-9,-64,15, 
  /* [11][0][][] */ 33,-50,-13,48,-8,-82,77,17,-47,90,47,-33,-70,-1,34,118,23,5,-104,79,87,-72,73,32,-53,15,-37,57,10,92,23,8, -41,-39,87,54,0,6,33,-57,44,-34,-50,-49,-24,39,46,45,-107,-121,-37,85,84,49,31,-64,-62,-17,23,8,-22,-33,-40,-53, -63,15,71,63,81,8,55,-22,74,48,-31,-78,-42,-30,-56,35,68,-51,68,3,7,-12,-112,2,-29,94,109,88,22,110,119,76, 
  /* [11][1][][] */ 101,58,-75,7,-50,10,100,28,57,-85,-90,-84,-114,87,-3,44,4,-104,-92,9,33,20,71,-62,-22,46,-46,3,60,8,-88,-40, 70,-14,-59,-79,108,-71,-36,61,-44,-76,13,-75,35,-3,-32,31,1,-118,-67,-52,-77,-84,-23,-70,91,-16,-10,-1,-73,31,58,25, -66,-16,-44,-96,100,-64,45,-18,-82,-39,3,-24,51,-43,-4,-81,-70,-89,13,22,-83,-5,-13,21,32,12,105,-4,-44,50,104,37, 
  /* [11][2][][] */ -28,-8,-41,-63,60,-107,-47,-3,-1,103,90,-83,-81,-36,96,11,62,47,-51,-37,-97,66,-13,-37,-87,-60,-44,72,93,88,-61,-118, 54,2,-91,-17,-38,95,16,77,-86,-34,-87,102,69,62,-34,-49,14,7,-123,-105,-56,91,-46,-6,68,-6,-58,70,-6,-50,-82,13, -32,64,76,-35,24,51,112,76,-40,-75,-80,2,5,9,127,27,54,-84,41,-3,-63,32,-101,-82,71,-13,-71,-36,-31,17,50,24, 
  /* [12][0][][] */ 37,-12,-113,-44,46,88,35,-96,-8,-10,90,0,61,-62,76,28,13,57,-57,-40,20,60,29,75,-48,76,20,31,70,79,-26,39, 25,-46,36,-103,24,45,-69,24,109,2,-99,35,-17,-47,-73,50,-51,-86,84,31,11,15,-38,100,-11,-50,-19,1,-32,-32,-64,-66, -61,29,-30,48,-41,-42,-81,-28,120,20,25,36,-66,51,-30,-44,38,32,-16,39,-74,99,-20,-58,-44,43,-84,25,-12,84,79,-37, 
  /* [12][1][][] */ -62,63,1,-114,15,6,-14,13,24,83,85,77,73,35,83,-55,78,46,22,107,127,62,-27,-50,-13,-18,-68,-42,110,-5,-46,64, -45,79,37,20,-3,32,-10,55,-64,71,-20,-95,17,54,-24,60,-44,-27,70,7,94,-23,94,102,35,63,-8,-56,98,-24,-20,12, 45,47,-83,-41,-62,2,17,-80,87,26,-65,37,28,-49,-26,-99,102,-54,87,77,-94,-20,-82,-3,-3,5,79,-50,-55,87,62,-43, 
  /* [12][2][][] */ -2,-51,5,-106,87,11,82,-24,35,80,35,104,-19,64,-86,-26,96,60,-42,-69,-46,90,67,85,22,45,6,31,26,35,97,-65, 13,27,-106,28,-30,65,17,-96,-32,-62,-84,50,48,62,-91,34,-75,80,-46,32,85,-13,6,-9,86,-19,-27,-65,-53,-33,11,73, -8,-66,-61,40,30,-58,-39,7,72,93,48,-28,-8,75,24,-27,16,-48,52,-63,23,-11,15,58,56,-3,90,46,6,-14,85,94, 
  /* [13][0][][] */ -16,39,-69,60,-64,-36,-22,-58,-37,-22,21,-8,67,12,-92,-65,-8,-68,-44,67,-13,42,70,-27,75,-1,47,19,29,-7,80,61, -43,62,15,-75,-13,95,-17,42,110,-87,18,-39,-6,-16,67,7,41,41,-4,-15,-32,34,127,0,16,-10,-55,-7,88,-13,52,-55, -82,36,58,-14,49,59,-26,47,-14,-43,-30,99,87,10,-17,-5,-84,-65,-45,9,59,-68,-76,9,-67,7,25,7,63,24,15,102, 
  /* [13][1][][] */ 39,-31,8,-24,-27,78,-29,60,22,36,67,39,-5,-6,41,-92,66,-68,73,3,3,-59,-57,-6,-59,45,55,-22,79,72,-53,35, 9,49,-80,7,-24,8,-47,43,29,-38,60,11,29,49,13,-22,-66,67,82,-22,-52,87,69,5,68,-69,-69,75,42,54,22,87, -21,-14,-42,-47,52,90,63,-65,74,37,-28,-60,108,-93,-77,73,-31,95,85,-43,-28,-57,-31,53,101,-16,-47,73,68,-88,-21,-65, 
  /* [13][2][][] */ 64,-36,-2,41,-85,85,54,-11,-21,-22,-59,99,-5,40,53,32,46,74,-56,-66,22,-51,-82,0,-62,0,-48,93,37,7,-38,-68, 85,-54,-2,-25,-87,7,-68,17,38,50,12,-28,89,-69,-77,43,6,21,84,85,66,-14,94,64,-31,16,-6,-68,106,68,-43,-15, -17,-71,29,75,60,-65,-53,-32,-25,16,-47,-67,44,-45,-91,-90,-3,77,-29,-14,-49,83,20,-80,16,50,24,90,51,13,16,-60, 
  /* [14][0][][] */ 11,35,44,50,-82,127,-46,-88,54,62,-96,37,116,11,-24,-45,-17,104,77,-44,-22,61,33,-1,-69,17,98,-53,47,-42,73,31, -84,109,47,-22,-40,-43,13,82,78,111,-100,99,-13,-84,35,-4,70,39,10,109,-17,-51,4,77,70,113,100,-13,76,-84,-65,116, 50,30,94,-17,83,53,6,-58,20,49,34,73,20,-57,-82,-6,109,-56,-16,123,41,42,-55,67,41,58,37,33,19,27,-86,-2, 
  /* [14][1][][] */ 53,91,-8,-63,86,-54,58,-5,84,73,89,36,-20,-32,51,6,-72,104,80,18,1,104,75,20,-6,107,-49,97,58,67,91,82, -104,77,78,-57,46,91,80,32,38,-72,21,10,-60,108,9,-56,31,-96,90,12,30,-43,-19,2,114,49,43,70,60,-90,92,22, -87,-70,-61,-97,-45,86,-94,50,85,-11,30,-60,124,-60,-109,-26,-10,-1,23,-69,-29,48,-63,55,31,31,-90,-65,-2,64,62,-83, 
  /* [14][2][][] */ 13,-20,70,89,-43,-71,-72,-5,96,-76,-36,-25,12,-33,-81,-22,47,-8,-7,-13,48,-97,12,9,101,-71,90,45,-35,47,-84,-21, -95,41,46,-64,-89,-25,-58,54,21,-37,56,55,29,-27,-24,-98,50,82,10,-96,-31,-37,81,-25,94,-6,-14,45,78,-55,-47,-30, -44,37,28,27,-77,102,34,-26,99,-39,-8,-48,104,-7,45,6,-63,-51,-57,75,-24,8,-54,64,-72,-100,-66,80,-8,22,-96,115, 
  /* [15][0][][] */ 83,59,13,84,-49,-75,-62,-14,-4,26,-14,-74,111,71,85,11,48,-75,40,-71,-34,46,-71,28,-8,44,14,-74,-46,-41,24,-28, 2,62,-30,-32,-33,77,7,103,47,-57,24,-36,18,92,72,38,-84,-20,21,39,61,11,-59,52,98,94,81,-9,62,7,-27,-27, 57,4,-30,6,-23,89,57,91,121,-97,-9,33,100,-8,-33,85,-100,48,35,53,5,45,78,43,78,6,-54,-28,-39,-102,-47,67, 
  /* [15][1][][] */ -71,-8,66,-9,-58,-82,-68,-83,49,62,47,-65,57,47,78,42,64,38,95,-24,-83,-15,94,-20,30,-91,25,76,88,9,-3,-63, 29,109,38,71,-64,-68,-80,-32,-46,17,-36,36,-42,14,23,-59,-60,10,-71,65,-16,47,77,-36,87,3,-16,96,-15,-64,63,57, -63,40,49,43,40,13,-22,-91,114,-67,15,-30,29,41,-54,-30,-16,-10,-63,32,-24,-46,42,-27,-40,-5,-81,-61,71,51,-53,127, 
  /* [15][2][][] */ 93,-91,96,82,81,-16,114,99,-93,-35,-34,-76,33,-41,47,29,48,-73,89,-77,58,-34,-40,-56,67,-92,-21,-89,-65,34,-97,14, 70,80,30,110,13,62,-47,56,-13,-92,33,-3,87,-52,-15,35,-60,72,22,-65,-24,-1,-39,37,71,52,67,-22,111,29,-38,69, 87,-40,112,69,8,-40,-48,25,81,39,71,-7,-7,36,95,75,83,91,-49,66,-6,111,69,-76,45,-56,38,-19,-34,-61,-40,12, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0011439024237915874, 0.0011602441081777215, 0.0012321126414462924, 0.0011627108324319124, 0.0012229826534166932, 0.0011303840437904, 0.0010851247934624553, 0.0012004952877759933, 0.0012556409928947687, 0.0012265185359865427, 0.0012526832288131118, 0.0011711118277162313, 0.0011937895324081182, 0.0013479421613737941, 0.0011539069237187505, 0.0011714305728673935, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,32,32,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.004616093821823597, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.004616093821823597, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0071689728647470474, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,8,8,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0071689728647470474, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,1024 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0071689728647470474, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,3 } };
const TfArray<1, float> quant13_scale = { 1, { 0.038224790245294571, } };
const TfArray<1, int> quant13_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,3 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,6,2 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,7,3 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,5,4 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension0, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension9, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4096, (TfLiteIntArray*)&tensor_dimension11, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1024, (TfLiteIntArray*)&tensor_dimension13, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
